---
# SPDX-License-Identifier: Apache-2.0
# SPDX-FileCopyrightText: 2025 The Linux Foundation

# Action test/validation workflow
name: "Test GitHub Action üß™"

# yamllint disable-line rule:truthy
on:
  workflow_dispatch:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

permissions: {}

jobs:
  ### Test the GitHub Action in this Repository ###
  tests:
    name: "Action Testing"
    runs-on: ubuntu-24.04
    permissions:
      contents: read
    timeout-minutes: 2
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      # Perform setup prior to running test(s)
      - name: "Checkout sample project repository"
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          repository: "lfreleng-actions/test-python-project"
          path: "test-python-project"

      - name: "Check for test-python-project directory"
        id: test-python-project
        uses: ./
        with:
          path: "test-python-project"

      - name: "Check for pyproject.toml file"
        id: pyproject-toml
        uses: ./
        with:
          path: "test-python-project/pyproject.toml"

      - name: "Check for LICENSE symlink"
        id: license-symlink
        uses: ./
        with:
          path: "test-python-project/LICENSE"

      - name: "Check: error when path not supplied"
        id: no-path
        uses: ./
        continue-on-error: true
        # Note: action not supplied a valid path
        # We subsequently test that this step fails

      - name: "Validate previous step failure"
        if: steps.no-path.outcome == 'success'
        shell: bash
        run: |
          # Check previous step failure
          echo "Error: previous step should have failed ‚ùå"
          exit 1

      - name: "Validate Action Output: ${{ github.repository }}"
        shell: bash
        run: |
          # Validate Action Output
          if [ "${{ steps.test-python-project.outputs.type }}" \
            != "directory" ]; then
            echo "Unexpected return value for: test-python-project ‚ùå"
            echo "Returned: ${{ steps.test-python-project.outputs.type }}"
            echo "Expected: directory"
            ERROR="true"
          fi
          if [ "${{ steps.pyproject-toml.outputs.type }}" \
            != "file" ]; then
            echo "Unexpected return value for: pyproject.toml ‚ùå"
            echo "Returned: ${{ steps.pyproject-toml.outputs.type }}"
            echo "Expected: file"
            ERROR="true"
          fi
          if [ "${{ steps.license-symlink.outputs.type }}" \
            != "file" ]; then
            echo "Unexpected return value for: LICENSE ‚ùå"
            echo "Returned: ${{ steps.license-symlink.outputs.type }}"
            echo "Expected: file"
            ERROR="true"
          fi
          if [ "${{ steps.license-symlink.outputs.symlink }}" \
            != "true" ]; then
            echo "Unexpected return value for: LICENSE ‚ùå"
            echo "Returned: ${{ steps.license-symlink.outputs.symlink }}"
            echo "Expected: true"
            ERROR="true"
          fi
          if [ "$ERROR" != "true" ]; then
            echo "All output tests passed ‚úÖ"
          else
            echo "At least one output test failed ‚ùå"
            exit 1
          fi
